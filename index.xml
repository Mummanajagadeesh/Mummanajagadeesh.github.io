<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jagadeesh Mummana | Portfolio</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Jagadeesh Mummana | Portfolio</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Jun 2025 05:30:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sensors in Robotics: How Ultrasonic, LiDAR, and IMU Work</title>
      <link>http://localhost:1313/blog/sensors-in-robotics/</link>
      <pubDate>Tue, 10 Jun 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/sensors-in-robotics/</guid>
      <description>&lt;p&gt;Sensors are to robots what &lt;strong&gt;eyes, ears, and skin&lt;/strong&gt; are to humans—but with far fewer limits. While we rely on just five senses, robots can be equipped with many more, &lt;strong&gt;sensing distances, movement, vibrations, orientation, light intensity, and even chemical properties&lt;/strong&gt;. These sensors form the bridge between the digital intelligence of a robot and the physical world it operates in.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Debugging a Robot In Simulation Before You Burn Wires</title>
      <link>http://localhost:1313/blog/robotics-simulation-tools/</link>
      <pubDate>Wed, 04 Jun 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/robotics-simulation-tools/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hardware does not come with an undo button&lt;/strong&gt;. Once you power it on, mistakes—from reversed wiring to faulty code—can result in costly damage. Motors may overheat, printed circuit boards (PCBs) can be fried, and sensors may break. These issues turn exciting projects into frustrating repair sessions. The &lt;strong&gt;autonomous drone&lt;/strong&gt; shown above, designed for GNSS-denied environments in webots as part of the &lt;strong&gt;ISRO Robotics Challenge&lt;/strong&gt;, is a perfect example—where careful planning, testing, and hardware safety were critical at every step&lt;/p&gt;</description>
    </item>
    <item>
      <title>Computer Vision vs. Sensor Fusion: Who Wins the Self-Driving Car Race?</title>
      <link>http://localhost:1313/blog/cv-vs-sensor-fusion/</link>
      <pubDate>Fri, 30 May 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/cv-vs-sensor-fusion/</guid>
      <description>&lt;p&gt;Tesla&amp;rsquo;s bold claim that “&lt;strong&gt;humans drive with eyes and a brain, so our cars will too&lt;/strong&gt;” sparked one of the most polarizing debates in autonomous vehicle (AV) technology: Can vision-only systems truly compete with—or even outperform—multi-sensor fusion architectures?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding the Basics of Machine Learning</title>
      <link>http://localhost:1313/blog/understanding-the-basics-of-ml/</link>
      <pubDate>Thu, 22 May 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/understanding-the-basics-of-ml/</guid>
      <description>&lt;p&gt;Machine learning is something that shows up all around us today—whether we&amp;rsquo;re aware of it or not. From personalized suggestions on YouTube and Netflix to automatic spam filtering in our inboxes, it’s quietly powering a lot of the tools we use daily.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why RISC-V Can Be a Game Changer?</title>
      <link>http://localhost:1313/blog/why-riscv-is-better/</link>
      <pubDate>Thu, 15 May 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/why-riscv-is-better/</guid>
      <description>&lt;p&gt;In an industry where silicon efficiency, design flexibility, and time-to-market are paramount, the limitations of proprietary processor architectures are becoming increasingly apparent. RISC-V, an open-source ISA, is reshaping the VLSI design landscape by enabling deeper hardware-software co-design, architectural customization at the RTL level, and tighter control over power, performance, and area (PPA)—without the constraints of licensing or closed specifications&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to VLSI Design Flow: RTL to GDSII</title>
      <link>http://localhost:1313/blog/vlsi-design-flow/</link>
      <pubDate>Thu, 08 May 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/vlsi-design-flow/</guid>
      <description>&lt;p&gt;Wonder why AI, modern smartphones, and countless digital devices have become so powerful yet compact? The secret lies in the ability to pack billions of transistors into tiny silicon chips — a feat accomplished through &lt;strong&gt;Very Large-Scale Integration (VLSI)&lt;/strong&gt;. At the core of this accomplishment is a complex, multi-step design flow that transforms abstract hardware concepts into a physical chip ready for fabrication.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ROS 2 vs ROS 1: What Changed and Why It Matters?</title>
      <link>http://localhost:1313/blog/ros1-vs-ros2/</link>
      <pubDate>Fri, 02 May 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/ros1-vs-ros2/</guid>
      <description>&lt;p&gt;Is ROS 1 still the right choice for your next robotics project, with its well-established tools and wide community support? Or, given the growing demand for real-time performance, scalability, and modern middleware, is it finally time to make the move to ROS 2?&lt;/p&gt;</description>
    </item>
    <item>
      <title>What is SLAM? And Why It’s the Brain of Mobile Robots</title>
      <link>http://localhost:1313/blog/what-is-slam/</link>
      <pubDate>Sun, 20 Apr 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/what-is-slam/</guid>
      <description>&lt;p&gt;In robotics, &lt;strong&gt;SLAM&lt;/strong&gt;—&lt;strong&gt;Simultaneous Localization and Mapping&lt;/strong&gt;—is regarded as one of the most fundamental and complex problems. At its core, SLAM addresses a deceptively simple question: &lt;em&gt;&amp;ldquo;Where am I, and what does the world around me look like?&amp;rdquo;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Switch to Linux and Thank Me Later</title>
      <link>http://localhost:1313/blog/switch-to-linux-and-thank-me-later/</link>
      <pubDate>Tue, 15 Apr 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/switch-to-linux-and-thank-me-later/</guid>
      <description>&lt;p&gt;You&amp;rsquo;re not really using your computer — you&amp;rsquo;re being allowed to.&#xA;If the system decides how you work, who’s really in control?&#xA;Linux doesn’t assume how you want to use your machine — it asks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>I²C: Fundamentals and Practical Aspects of Inter-Integrated Circuit Communication</title>
      <link>http://localhost:1313/blog/i2c/</link>
      <pubDate>Tue, 08 Apr 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/i2c/</guid>
      <description>&lt;p&gt;I²C is a &lt;strong&gt;synchronous, half-duplex, multi-master, multi-slave&lt;/strong&gt; serial communication protocol developed by Philips (now NXP) in the 1980s. It was designed for &lt;strong&gt;on-board communication between integrated circuits&lt;/strong&gt;, especially in systems with multiple low-speed peripherals controlled by a microcontroller.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SPI: Understanding the Serial Peripheral Interface Protocol</title>
      <link>http://localhost:1313/blog/spi/</link>
      <pubDate>Tue, 01 Apr 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/spi/</guid>
      <description>&lt;p&gt;SPI is a &lt;strong&gt;synchronous&lt;/strong&gt; serial communication protocol designed for &lt;strong&gt;high-speed, full-duplex data exchange&lt;/strong&gt; between a master device and one or more peripheral (slave) devices. It was originally developed by Motorola and remains widely adopted in microcontrollers, sensors, memory chips, ADCs/DACs, displays, and more.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UART: A Detailed Overview of Asynchronous Serial Communication</title>
      <link>http://localhost:1313/blog/uart/</link>
      <pubDate>Thu, 27 Mar 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/uart/</guid>
      <description>&lt;p&gt;UART is one of the oldest and most fundamental methods of serial communication in embedded systems. As its name suggests, it operates asynchronously, meaning &lt;strong&gt;there is no shared clock signal&lt;/strong&gt; between the transmitter and the receiver. This makes UART especially attractive in scenarios where simplicity and minimal wiring are important.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Demystifying UART, SPI, and I2C: Communication Between Chips</title>
      <link>http://localhost:1313/blog/communication-between-chips/</link>
      <pubDate>Mon, 24 Mar 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/communication-between-chips/</guid>
      <description>&lt;p&gt;In both VLSI design and embedded systems, no chip operates in isolation. Whether it&amp;rsquo;s a microcontroller interfacing with sensors, a processor communicating with memory modules, or multiple peripherals synchronizing data, &lt;strong&gt;inter-chip communication&lt;/strong&gt; is fundamental to building reliable and scalable hardware systems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kociemba’s Algorithm – The Two-Phase Breakthrough #PID1.5</title>
      <link>http://localhost:1313/blog/kociembas-alg-the-2-phase-breakthrough/</link>
      <pubDate>Tue, 18 Mar 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/kociembas-alg-the-2-phase-breakthrough/</guid>
      <description>&lt;p&gt;Kociemba’s algorithm revolutionizes Rubik’s Cube solving by efficiently navigating the immense complexity of the cube’s state space using advanced mathematical tools from &lt;strong&gt;group theory&lt;/strong&gt; and &lt;strong&gt;heuristic search&lt;/strong&gt;. This two-phase method strikes a balance between &lt;strong&gt;tractability&lt;/strong&gt; and &lt;strong&gt;optimality&lt;/strong&gt;, making it a cornerstone of computational puzzle solving.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How Do Computers Come into the Art of Solving Puzzles? #PID1.4</title>
      <link>http://localhost:1313/blog/computers-in-the-art-of-solving-puzzles/</link>
      <pubDate>Fri, 07 Mar 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/computers-in-the-art-of-solving-puzzles/</guid>
      <description>&lt;p&gt;Throughout history, puzzles have intrigued the human mind, not merely for entertainment but for the challenge they pose to logic, creativity, and persistence. From ancient labyrinths to Sudoku and the Rubik’s Cube, solving a puzzle often feels like an art — but beneath that art lies a surprising amount of structure. And where there is structure, computers can often outperform intuition.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started with Hugo: A Step-by-Step Guide</title>
      <link>http://localhost:1313/blog/getting-started-with-hugo/</link>
      <pubDate>Sat, 01 Mar 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/getting-started-with-hugo/</guid>
      <description>&lt;p&gt;Hugo is a fast, flexible, and open-source static site generator that allows you to build websites with ease. Originally popular for blogging, Hugo’s versatility makes it ideal for creating a wide range of sites — from personal portfolios and academic project showcases to documentation hubs and even e-commerce sites. Whether you’re building a professional portfolio, a research site to share your academic work, or a personal blog, Hugo has you covered.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Mathematics Behind the Rubik&#39;s Cube #PID1.3</title>
      <link>http://localhost:1313/blog/mathematics-behind-rubiks-cube/</link>
      <pubDate>Tue, 25 Feb 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/mathematics-behind-rubiks-cube/</guid>
      <description>&lt;p&gt;The Rubik’s Cube is not just a puzzle; it’s a deep mathematical object grounded in group theory, combinatorics, and geometry. Understanding the math behind it allows us to grasp why it has 43 quintillion possible states, how we categorize moves, and why some solutions are more efficient than others.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting Up Icarus Verilog on Google Colab</title>
      <link>http://localhost:1313/blog/setting-up-icarus-verilog-on-google-colab/</link>
      <pubDate>Wed, 19 Feb 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/setting-up-icarus-verilog-on-google-colab/</guid>
      <description>&lt;p&gt;Google Colab is a cloud-based platform that allows you to run code in a Jupyter Notebook environment. While it&amp;rsquo;s primarily designed for Python, it can also be adapted to run Verilog simulations using Icarus Verilog. This guide walks you through setting up Icarus Verilog on Colab, writing and compiling Verilog code, running simulations, and generating waveform files for debugging—all in the cloud.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Solving The Rubiks Cube #PID1.2</title>
      <link>http://localhost:1313/blog/solving-the-rubiks-cube/</link>
      <pubDate>Wed, 12 Feb 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/solving-the-rubiks-cube/</guid>
      <description>&lt;!-- **Solving the Rubik’s Cube: A Guide to CFOP, Roux, and ZZ Methods** --&gt;&#xD;&#xA;&lt;p&gt;Solving a Rubik’s Cube isn’t just about memorizing algorithms — it’s about understanding how moves affect the pieces. There are several solving methods, each with its own approach. Some prioritize speed, some focus on efficiency or fewer rotations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why Everyone’s Talking About DeepSeek?</title>
      <link>http://localhost:1313/blog/why-everyone-is-talking-about-deepseek/</link>
      <pubDate>Thu, 06 Feb 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/why-everyone-is-talking-about-deepseek/</guid>
      <description>&lt;p&gt;Over the last few weeks, one name has kept popping up across AI forums, Twitter feeds, and GitHub discussions: &lt;strong&gt;DeepSeek&lt;/strong&gt;. Whether it&amp;rsquo;s about their models, benchmarks, or training philosophy, there&amp;rsquo;s been a noticeable shift in attention toward this new but fast-rising player in the open-source LLM space. But beyond the hype and headlines, what actually makes DeepSeek stand out in an increasingly crowded field?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mechanics of Rubiks Cube #PID1.1</title>
      <link>http://localhost:1313/blog/mechanics-of-rubiks-cube/</link>
      <pubDate>Fri, 31 Jan 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/mechanics-of-rubiks-cube/</guid>
      <description>&lt;p&gt;The Rubik’s Cube is a 3D combination puzzle that has fascinated minds for decades. Invented in &lt;strong&gt;1974 by Ernő Rubik&lt;/strong&gt;, a Hungarian architect and professor, it was originally called the &amp;ldquo;Magic Cube.&amp;rdquo; Designed as a teaching tool to explain 3D movement, it quickly became a global sensation. The challenge? Scramble it, then restore each face to a single color—sounds simple, but millions have struggled (and succeeded) at it since!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why Should You Start Solving Puzzles? #PID1.0</title>
      <link>http://localhost:1313/blog/why-should-you-start-solving-puzzles/</link>
      <pubDate>Fri, 24 Jan 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/why-should-you-start-solving-puzzles/</guid>
      <description>&lt;!-- ##### Puzzles: More Than Just Fun --&gt;&#xD;&#xA;&lt;p&gt;Whether it&amp;rsquo;s a crossword, Sudoku, or a complex jigsaw, puzzles have a unique way of capturing our attention. But what makes solving them feel so rewarding? Beyond the entertainment, puzzles play a significant role in enhancing cognitive abilities, improving problem-solving skills, and offering a tangible sense of accomplishment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>My RosConIN&#39;24 (&#43;GNOME Asia Summit) Experience</title>
      <link>http://localhost:1313/blog/my-rosconin24-experience/</link>
      <pubDate>Fri, 17 Jan 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/my-rosconin24-experience/</guid>
      <description>&lt;p&gt;Last year, I missed ROSCon India due to exams and, honestly, had no idea what I was missing out on. This year, though, I made it, and it turned out to be more than I ever imagined. The two days I spent at ROSConIN&#39;24 were nothing short of transformative, and this blog itself is a result of the inspiration I drew from the event.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why Blog in 2025? (And How to Get Started)</title>
      <link>http://localhost:1313/blog/why-blog-in-2025/</link>
      <pubDate>Fri, 10 Jan 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/why-blog-in-2025/</guid>
      <description>&lt;!-- ##### **Why Blog in 2025? (And How to Get Started)** 🚀   --&gt;&#xD;&#xA;&lt;p&gt;In 2025, with the internet brimming with TikToks, reels, and AI-generated articles, you might wonder—&lt;strong&gt;is blogging still worth it?&lt;/strong&gt;&lt;br&gt;&#xA;The answer is a resounding &lt;strong&gt;YES&lt;/strong&gt;, and here’s why.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hello World!! (Why I Built This Blog)</title>
      <link>http://localhost:1313/blog/hello-world/</link>
      <pubDate>Fri, 03 Jan 2025 05:30:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/hello-world/</guid>
      <description>&lt;!-- ### Welcome to My Blog! 🚀   --&gt;&#xD;&#xA;&lt;p&gt;Hello, and thank you for visiting. My name is &lt;strong&gt;Jagadeesh&lt;/strong&gt;, and this blog is a personal and professional record of my journey through college, projects, and the experiences that continue to shape my interests and aspirations.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/gpbot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/gpbot/</guid>
      <description>&lt;h2 id=&#34;gpbot---basic-sensor-based-general-purpose-amrhttpsgithubcommummanajagadeeshgpbot-w&#34;&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/gpbot-w&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;GPBOT - Basic Sensor based General Purpose AMR&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/gpbot-w-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;h5 id=&#34;do-checkout-&#34;&gt;Do checkout :&lt;/h5&gt;&#xA;&lt;h5 id=&#34;basic-line-following-robothttpsmummanajagadeeshgithubioprojectsgpbotlfr&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://mummanajagadeesh.github.io/projects/gpbot/lfr&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;Basic Line Following Robot&lt;/a&gt;&lt;/strong&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;obstacle-avoidance-robothttpsmummanajagadeeshgithubioprojectsgpbotobstacle&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://mummanajagadeesh.github.io/projects/gpbot/obstacle&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;Obstacle Avoidance Robot&lt;/a&gt;&lt;/strong&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;wall-follower-robothttpsmummanajagadeeshgithubioprojectsgpbotwallfollow&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://mummanajagadeesh.github.io/projects/gpbot/wallfollow&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;Wall Follower Robot&lt;/a&gt;&lt;/strong&gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;differential-drive-robothttpsmummanajagadeeshgithubioprojectsgpbotdiffdrive&#34;&gt;&lt;strong&gt;&lt;a href=&#34;https://mummanajagadeesh.github.io/projects/gpbot/diffdrive&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;Differential Drive Robot&lt;/a&gt;&lt;/strong&gt;&lt;/h5&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;GPBOT&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;This 4-wheeled robot is equipped with GPS, IMU, LiDAR, Distance Sensors, and a 2-DOF camera (using linear and rotary actuators). It detects objects using computer vision, avoids obstacles, and navigates autonomously.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;June 2024&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/gpbot-w&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;GPBOT🔗&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Individual&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Level&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Beginner&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Simulation, Programming&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tools Used&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Webots, Python&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;On Hold&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;&#xA;&lt;p&gt;The robot is equipped with &lt;strong&gt;GPS, IMU, LiDAR, and a 2-DOF camera&lt;/strong&gt;, enabling it to detect objects using computer vision, avoid obstacles, and navigate autonomously.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/gpbot/diffdrive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/gpbot/diffdrive/</guid>
      <description>&lt;h2 id=&#34;differential-drive-robot-simulationhttpsgithubcommummanajagadeeshdifferential-drive-robot-w&#34;&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/differential-drive-robot-w&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;Differential Drive Robot Simulation&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/differential-drive-robot-w-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;Differential Drive Robot&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;A custom-built robot featuring a differential drive system that calculates its position and movement based on wheel rotations&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;June 2024&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/differential-drive-robot-w&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;DDR🔗&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Individual&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Level&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Beginner&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Simulation, Programming&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tools Used&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Webots, Python&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;On Hold&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;This repository contains the simulation of a &lt;strong&gt;Differential Drive Robot&lt;/strong&gt;, built from scratch, which uses basic odometry to track its position. The robot is equipped with motors and position sensors to calculate its movement and orientation while navigating the environment.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/gpbot/lfr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/gpbot/lfr/</guid>
      <description>&lt;h2 id=&#34;line-follower-robothttpsgithubcommummanajagadeeshline-follower-robot-w&#34;&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/line-follower-robot-w&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;Line Follower Robot&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/line-follower-robot-w-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;LFRBOT&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;This project features a robot that follows a line using basic sensors. It detects the line on the ground and adjusts its movement to stay on track. The robot can navigate turns and intersections without needing complex algorithms&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;June 2024&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/line-follower-robot-w&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;LFRBOT🔗&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Individual&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Level&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Beginner&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Simulation, Programming&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tools Used&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Webots, Python&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;On Hold&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;This project simulates a line-following robot using the &lt;strong&gt;Webots&lt;/strong&gt; robotics simulator. The robot, based on the &lt;strong&gt;e-puck&lt;/strong&gt; model, follows a black track created in &lt;strong&gt;Tinkercad&lt;/strong&gt; using two IR sensors.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/gpbot/obstacle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/gpbot/obstacle/</guid>
      <description>&lt;h2 id=&#34;obstacle-avoidance-robothttpsgithubcommummanajagadeeshobstacle-avoidance-robot-w&#34;&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/obstacle-avoidance-robot-w&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;Obstacle Avoidance Robot&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/obstacle-avoidance-robot-w-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;Obstacle Avoidance Robot&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;A robot equipped with basic sensors that detects obstacles and changes direction to avoid collisions without using advanced algorithms&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;June 2024&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/obstacle-avoidance-robot-w&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;OAR🔗&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Individual&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Level&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Beginner&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Simulation, Programming&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tools Used&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Webots, Python&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;On Hold&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;This project simulates a line-following robot using the &lt;strong&gt;Webots&lt;/strong&gt; robotics simulator. The robot, based on the &lt;strong&gt;e-puck&lt;/strong&gt; model, follows a black track created in &lt;strong&gt;Tinkercad&lt;/strong&gt; using two IR sensors.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/gpbot/wallfollow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/gpbot/wallfollow/</guid>
      <description>&lt;h2 id=&#34;wall-follower-robot-simulationhttpsgithubcommummanajagadeeshwall-follower-robot-w&#34;&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/wall-follower-robot-w&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;Wall Follower Robot Simulation&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/wall-follower-robot-w-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;Wall Follower Robot&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;The wall-following robot travels along walls in a maze. It uses basic sensors to detect the distance to the wall and adjusts its path to stay close. The robot explores all possible paths to find its destination without relying on algorithms, simply following the wall as it moves&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;June 2024&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/wall-follower-robot-w&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;WFR🔗&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Individual&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Level&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Beginner&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Simulation, Programming&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tools Used&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Webots, Python&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;On Hold&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;This project contains the &lt;strong&gt;Wall Follower Robot&lt;/strong&gt; simulation, which utilizes an &lt;strong&gt;e-puck&lt;/strong&gt; model to navigate a maze using proximity sensors. The robot follows walls and explores paths randomly until it reaches its destination. This implementation does not use pathfinding algorithms or PID controllers; instead, it relies on basic logic to avoid obstacles and move along the walls.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/improve/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/improve/</guid>
      <description>&lt;h2 id=&#34;improve-image-processing-using-veriloghttpsgithubcommummanajagadeeshimprove&#34;&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/ImProVe&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;ImProVe: IMage PROcessing using VErilog&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/improve-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;h5 id=&#34;do-checkout--neural-network-in-veriloghttpmummanajagadeeshgithubioprojectsimprovenever&#34;&gt;Do checkout : &lt;strong&gt;&lt;a href=&#34;http://mummanajagadeesh.github.io/projects/improve/never/&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;NEural NEtwork in VERilog&lt;/a&gt;&lt;/strong&gt;&lt;/h5&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;ImProVe&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;ImProVe (Image Processing using Verilog) is a project focused on implementing image processing techniques using Verilog. It involves building image processing logic from the ground up, exploring various algorithms and approaches within HDL&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;27 Nov 2024&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/ImProVe&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;ImProVe🔗&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Individual&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Level&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Beginner&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Image Processing, HDL, Computer Vision, Programming&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tools Used&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Verilog, SystemVerilog, Icarus, Xilinx, Python, OpenCV&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Ongoing (Active)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Progress&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- Implemented edge detection algorithms: Prewitt, Sobel, Canny, Moravec corner detection, and Emboss. &lt;br&gt; - Applied blurring filters: Gaussian, Median, Box, and Bilateral.  &lt;br&gt; - Completed geometric operations: Rotation, Translation, Shearing, Cropping, Reflection, and Perspective Transform.  &lt;br&gt; - Integrated thresholding techniques: Global Thresholding, Adaptive Thresholding, Otsu&amp;rsquo;s Method, and Color Thresholding. &lt;br&gt; - Color effects: Grayscale, Sepia, Contrast, Brightness, Invert, Negative, Saturation, Gamma correction, and Sharpening.  &lt;br&gt; - Developed subprojects: Label detection (Done), Document scanner (Ongoing), Stereo camera matching (Almost done), MNIST Digit Recognition and OCR [EMNIST] (In Working Condition).&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Next Steps&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- Develop a synthesizable module as a proof of concept (Almost Done) &lt;br&gt; - Implement morphological operations: Dilation, Closing, Opening.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;!-- | **ImProVe Project Versions** | **Linked Projects** |&#xD;&#xA;|------------------------------|---------------------|&#xD;&#xA;| **[ImProVeR: ImProVe Revised Version](https://github.com/Mummanajagadeesh/ImProVeR)** &lt;br&gt; Revised version with improved documentation and structure for better clarity and usability | **[CoVer: CORDIC math modules in VERilog](https://github.com/Mummanajagadeesh/ImProVe)** &lt;br&gt; Replaces non-synthesizable math constructs by utilizing the CORDIC algorithm for more efficient hardware implementation |&#xD;&#xA;| **[ImProVeS: ImProVe with Synthesizable Modules](https://github.com/Mummanajagadeesh/ImProVeS)** &lt;br&gt; Focuses on making all modules synthesizable and aims for simulation on Xilinx Vivado | **[NeVer: NEural NEtwork in VERilog](http://mummanajagadeesh.github.io/projects/improve/never/)** &lt;br&gt; Implements a neural network in Verilog for better hardware acceleration of image processing tasks |&#xD;&#xA;| **[ImProVeD: ImProVe with Deep Learning](https://github.com/Mummanajagadeesh/ImProVeD)** &lt;br&gt; Adds deep learning techniques to enhance image processing capabilities | **[ProtoN: PROTOcol comparison in verilog](https://github.com/Mummanajagadeesh/ProtoN)** &lt;br&gt; Compares different communication protocols in Verilog for efficient high-speed data transfer, focusing on synthesizability and module communication | --&gt;&#xD;&#xA;&lt;h4 id=&#34;project-overview&#34;&gt;&lt;strong&gt;Project Overview&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;ImProVe is an initiative to implement core image processing algorithms using Verilog. It aims to achieve real-time performance for advanced applications in fields like robotics, medical imaging, and computer vision.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/improve/cnn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/improve/cnn/</guid>
      <description>&lt;h3 id=&#34;cnn-models-for-cifar-10--inference-using-verilog-optimized-for-hardware&#34;&gt;CNN Models for CIFAR-10 — Inference Using Verilog, Optimized for Hardware&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;CNN For CIFAR10&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Implements a light weight CNN in Verilog HDL for better hardware acceleration of image claasification tasks&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;21 June 2025&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/NeVer&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;NeVer🔗&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Individual&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Level&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Beginner&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;HDL, Computer Vision, Programming, ML&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tools Used&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Verilog, Icarus, Python, NumPy&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Ongoing (Active)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Progress&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- Developed a &lt;code&gt;lightweight CNN [Conv2D×2 + MaxPool]×3 → GAP → Dense(10)&lt;/code&gt; for &lt;code&gt;CIFAR-10 Image Classification (32x32RGB)&lt;/code&gt; using both &lt;code&gt;IEEE 754&lt;/code&gt; floating-point and &lt;code&gt;Q1.31&lt;/code&gt;, &lt;code&gt;Q1.15&lt;/code&gt;, &lt;code&gt;Q1.7&lt;/code&gt;, and &lt;code&gt;Q1.3&lt;/code&gt; fixed-point arithmetic, achieving 84% accuracy in both implementations &lt;em&gt;(Py ~85% | FP ~84% | Q31 ~84% | Q15 ~84% | Q7 ~82% | Q3 ~65%)&lt;/em&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Next Steps&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- Optimise it for hw inference&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h4 id=&#34;model-architectures&#34;&gt;Model Architectures&lt;/h4&gt;&#xA;&lt;h5 id=&#34;model_arch_1&#34;&gt;&lt;strong&gt;MODEL_ARCH_1&lt;/strong&gt;&lt;/h5&gt;&#xA;&lt;p&gt;[ (Conv2D → BN)×2 → MaxPool → Dropout(0.3) ]&lt;br&gt;&#xA;→ [ (Conv2D → BN)×2 → MaxPool → Dropout(0.4) ]&lt;br&gt;&#xA;→ [ (Conv2D → BN)×2 → MaxPool → Dropout(0.5) ]&lt;br&gt;&#xA;→ Flatten → Dense(512) → BN → Dropout(0.5) → Dense(10, softmax)&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/improve/fixed-point/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/improve/fixed-point/</guid>
      <description>&lt;h3 id=&#34;fixed-point-conversion-report-for-emnist-neural-network&#34;&gt;Fixed-Point Conversion Report for EMNIST Neural Network&lt;/h3&gt;&#xA;&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;&#xA;&lt;p&gt;This report describes how I transitioned the EMNIST neural network implementation from floating-point arithmetic to fixed-point representation. The goal was to reduce hardware complexity and improve synthesis compatibility by replacing floating-point computations with fixed-point ones, while preserving accuracy.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/improve/matrix-multiplier/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/improve/matrix-multiplier/</guid>
      <description>&lt;h3 id=&#34;systolic-array-matrix-multiplication&#34;&gt;Systolic Array Matrix Multiplication&lt;/h3&gt;&#xA;&lt;h4 id=&#34;overview&#34;&gt;Overview&lt;/h4&gt;&#xA;&lt;p&gt;This project implements &lt;strong&gt;matrix multiplication&lt;/strong&gt; using a &lt;strong&gt;systolic array architecture&lt;/strong&gt; in Verilog.&lt;br&gt;&#xA;The design enables &lt;strong&gt;parallel computation&lt;/strong&gt; and leverages &lt;strong&gt;hardware-level performance optimization&lt;/strong&gt; for high-speed data processing.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/improve/never/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/improve/never/</guid>
      <description>&lt;h2 id=&#34;never-neural-network-in-veriloghttpsgithubcommummanajagadeeshnever&#34;&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/NeVer&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;NeVer: NEural NEtwork in VERilog&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/never-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;h5 id=&#34;do-checkout-main-project-improve-image-processing-using-veriloghttpmummanajagadeeshgithubioprojectsimprove&#34;&gt;Do Checkout Main Project: &lt;strong&gt;&lt;a href=&#34;http://mummanajagadeesh.github.io/projects/improve/&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;ImProVe: IMage PROcessing using VErilog&lt;/a&gt;&lt;/strong&gt;&lt;/h5&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;NeVer&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;NeVer implements a neural network in Verilog for better hardware acceleration of image processing tasks&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;28 Feb 2025&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/NeVer&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;NeVer🔗&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Individual&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Level&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Beginner&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Image Processing, HDL, Computer Vision, Programming, ML&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tools Used&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Verilog, Icarus, Perl, TCL, Quartus, C++, Python, NumPy&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Ongoing (Active)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Progress&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- Implemented detection of MNIST digits (0-9)  &lt;br&gt; - Added support for EMNIST, enabling classification of 62 character classes &lt;br&gt; - Integrated real-time inference with a Tkinter-based character drawing interface, achieving approx 1.5s latency per prediction in simulation&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Next Steps&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- Ensure the top module is synthesizable  &lt;br&gt; - Optimize the design for parallel processing, leveraging Multiply-Accumulate (MAC) operations  &lt;br&gt; - Enhance floating-point multiplication and division support for improved computational efficiency&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;project-overview&#34;&gt;&lt;strong&gt;Project Overview&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;This project presents a novel, fully hardware-based neural network inference pipeline in Verilog, targeting the 62-class EMNIST dataset (digits + upper/lowercase letters). It includes two separate implementations: one using IEEE 754 single-precision floating-point arithmetic, and another using 64-bit fixed-point arithmetic. Both versions are designed without relying on external IP cores and are built entirely using free and open-source tools.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/isro-anav/challenge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/isro-anav/challenge/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;For complete official details and documentation, visit the &lt;a href=&#34;https://www.ursc.gov.in/IRoC-U2025/&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;ISRO IRoC-U2025&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;iroc-u-2025--technical-challenge-summary&#34;&gt;&lt;strong&gt;IRoC-U 2025 – Technical Challenge Summary&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;challenge-overview&#34;&gt;&lt;strong&gt;Challenge Overview&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;Design and demonstrate an &lt;strong&gt;Autonomous Navigation System for an Aerial Vehicle (ANAV)&lt;/strong&gt; that can function in a simulated Martian environment &lt;strong&gt;without any external navigation aids&lt;/strong&gt; like GNSS, pseudolites, or reflectors.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/isro-anav/simulation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/isro-anav/simulation/</guid>
      <description>&lt;h3 id=&#34;simulation-of-martian-arena-in-webots-for-autonomous-drone-testing&#34;&gt;Simulation of Martian Arena in Webots for Autonomous Drone Testing&lt;/h3&gt;&#xA;&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;&#xA;&lt;p&gt;To develop and evaluate autonomous drone navigation algorithms in a Mars-like environment, we replicated a Martian surface arena within the Webots simulation platform. This virtual testbed allows us to rigorously test and fine-tune our system before deploying it on physical hardware.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/never/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/never/</guid>
      <description>&lt;h2 id=&#34;never-neural-network-in-veriloghttpsgithubcommummanajagadeeshnever&#34;&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/NeVer&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;NeVer: NEural NEtwork in VERilog&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;h5 id=&#34;do-checkout-main-project-improve-image-processing-using-veriloghttpmummanajagadeeshgithubioprojectsimprove&#34;&gt;Do Checkout Main Project: &lt;strong&gt;&lt;a href=&#34;http://mummanajagadeesh.github.io/projects/improve/&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;ImProVe: IMage PROcessing using VErilog&lt;/a&gt;&lt;/strong&gt;&lt;/h5&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;NeVer&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;NeVer implements a neural network in Verilog for better hardware acceleration of image processing tasks&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;28 Feb 2025&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/NeVer&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;NeVer🔗&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Individual&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Level&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Beginner&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Image Processing, HDL, Computer Vision, Programming, ML&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tools Used&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Verilog, Icarus, Perl, TCL, Quartus, Python, NumPy&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Ongoing (Active)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Progress&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- Implemented detection of MNIST digits (0-9)  &lt;br&gt; - Added support for EMNIST, enabling classification of 62 character classes &lt;br&gt; - Integrated real-time inference with a Tkinter-based character drawing interface, achieving approx 1.5s latency per prediction in simulation&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Next Steps&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- Ensure the top module is synthesizable  &lt;br&gt; - Optimize the design for parallel processing, leveraging Multiply-Accumulate (MAC) operations  &lt;br&gt; - Enhance floating-point multiplication and division support for improved computational efficiency&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;project-overview&#34;&gt;&lt;strong&gt;Project Overview&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;This project presents a novel, fully hardware-based neural network inference pipeline in Verilog, targeting the &lt;code&gt;62-class&lt;/code&gt; EMNIST dataset (digits + upper/lowercase letters). This project provides two separate implementations: one using IEEE 754 single-precision floating-point arithmetic, and another using 64-bit fixed-point arithmetic. Both versions are designed without relying on external IP cores.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/pidc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/pidc/</guid>
      <description>&lt;h2 id=&#34;pidc---pid-controller-using-opampshttpsgithubcommummanajagadeeshpidc_ctrl&#34;&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/PIDC_CTRL&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;PIDC - PID Controller using OpAmps&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/pid_ctrl-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;PIDC&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Implemented a PID controller using operational amplifiers to regulate system response and maintain desired performance. The design leverages analog circuitry to achieve precise control over error correction and stability.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Sep 2024&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/PIDC_CTRL&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;PIDC🔗&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Individual&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Level&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Beginner&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Simulation , OpAmps&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tools Used&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;LtSpice&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;On Hold&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;pid-controller-theory-and-hardware-realization-using-op-amps&#34;&gt;&lt;strong&gt;PID Controller: Theory and Hardware Realization Using Op-Amps&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;A &lt;strong&gt;PID (Proportional-Integral-Derivative) controller&lt;/strong&gt; is a fundamental tool in control systems, widely used in industrial automation, robotics, temperature control, and motor speed regulation. It is designed to &lt;strong&gt;minimize error&lt;/strong&gt; and &lt;strong&gt;improve stability&lt;/strong&gt; by adjusting a system’s input based on the error between the desired setpoint and the actual output.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/prosarm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/prosarm/</guid>
      <description>&lt;h2 id=&#34;pr057h371c4rmhttpsgithubcommummanajagadeeshpr057h371c4rm&#34;&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/PR057H371C4RM&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;PR057H371C4RM&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/pr057h371c4rm-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;PR057H371C4RM&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;A simple prosthetic arm that utilizes servo motors to create tension in strings, replicating the function of human tendons to achieve realistic finger motion.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Ideation(2018), Implementation(Nov 2023)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/PR057H371C4RM&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;PR057H371C4RM🔗&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Individual&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Level&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Beginner&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Mechanical Design, Programming&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tools Used&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Blender, Fusion 360, Tinkercad, Wokwi, VS Code, OpenCV, MediaPipe, Python, C++&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Ongoing (Passive)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Progress&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- Mechanical model complete with updated tolerances.  &lt;br&gt; - Finger tracking using MediaPipe is fully functional.  &lt;br&gt; - Servo control code is operational.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Next Steps&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- Analyze weight distribution.  &lt;br&gt; - Reevaluate strength and agility for optimization.  &lt;br&gt; - 3D print and assemble the prosthetic arm.  &lt;br&gt; - Deploy the system on hardware.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;overview&#34;&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;p&gt;PR057H371C4RM is a &lt;strong&gt;biomechanical prosthetic arm&lt;/strong&gt; designed to replicate the &lt;strong&gt;natural movement and structure of a human hand&lt;/strong&gt; as closely as possible. The project focuses on affordability, accessibility, and precision in design, making it a viable option for those who need a functional mechanical replacement for a lost limb.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/protocols/i2c_code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/protocols/i2c_code/</guid>
      <description>&lt;h4 id=&#34;master&#34;&gt;MASTER&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;`timescale&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;ns &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;ps&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Main module declaration&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; i2c_master(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; clk,                &lt;span style=&#34;color:#75715e&#34;&gt;// System clock&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; rst,                &lt;span style=&#34;color:#75715e&#34;&gt;// Reset signal&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] addr,         &lt;span style=&#34;color:#75715e&#34;&gt;// 7-bit I2C slave address&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] data_in,      &lt;span style=&#34;color:#75715e&#34;&gt;// Data to send to slave in write mode&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; enable,             &lt;span style=&#34;color:#75715e&#34;&gt;// Start signal for I2C communication&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; rw,                 &lt;span style=&#34;color:#75715e&#34;&gt;// Read/Write control (0 for write, 1 for read)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] data_out,     &lt;span style=&#34;color:#75715e&#34;&gt;// Data received from slave in read mode&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; ready,             &lt;span style=&#34;color:#75715e&#34;&gt;// Indicates when the master is ready for a new transaction&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;inout&lt;/span&gt; i2c_sda,                 &lt;span style=&#34;color:#75715e&#34;&gt;// I2C data line (SDA) - bidirectional&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;inout&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;wire&lt;/span&gt; i2c_scl             &lt;span style=&#34;color:#75715e&#34;&gt;// I2C clock line (SCL) - bidirectional&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Define states for I2C master FSM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;localparam&lt;/span&gt; IDLE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;localparam&lt;/span&gt; START &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;localparam&lt;/span&gt; ADDRESS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;localparam&lt;/span&gt; READ_ACK &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;localparam&lt;/span&gt; WRITE_DATA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;localparam&lt;/span&gt; WRITE_ACK &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;localparam&lt;/span&gt; READ_DATA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;localparam&lt;/span&gt; READ_ACK2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;localparam&lt;/span&gt; STOP &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;localparam&lt;/span&gt; DIVIDE_BY &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;      &lt;span style=&#34;color:#75715e&#34;&gt;// Clock divider to generate I2C clock from system clock&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] state;               &lt;span style=&#34;color:#75715e&#34;&gt;// Current state of the FSM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] saved_addr;          &lt;span style=&#34;color:#75715e&#34;&gt;// Stores the 7-bit address and RW bit for the current transaction&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] saved_data;          &lt;span style=&#34;color:#75715e&#34;&gt;// Data to be sent in write transactions&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] counter;             &lt;span style=&#34;color:#75715e&#34;&gt;// Bit counter for data/address transmission&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] counter2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;        &lt;span style=&#34;color:#75715e&#34;&gt;// Divider counter for generating i2c_clk&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; write_enable;              &lt;span style=&#34;color:#75715e&#34;&gt;// Controls whether the master drives SDA line&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; sda_out;                   &lt;span style=&#34;color:#75715e&#34;&gt;// Data to output on SDA line when write_enable is 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; i2c_scl_enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;        &lt;span style=&#34;color:#75715e&#34;&gt;// Controls the state of the i2c_scl line (enabled or high)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; i2c_clk &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;               &lt;span style=&#34;color:#75715e&#34;&gt;// Internal I2C clock signal&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Ready signal is high when the master is idle and not in reset&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;assign&lt;/span&gt; ready &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((rst &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (state &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; IDLE)) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// I2C SCL signal: High when i2c_scl_enable is low; otherwise, driven by i2c_clk&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;assign&lt;/span&gt; i2c_scl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (i2c_scl_enable &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; i2c_clk;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// SDA line is driven by sda_out when write_enable is high; otherwise, it&amp;#39;s in high-impedance&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;assign&lt;/span&gt; i2c_sda &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (write_enable &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; sda_out &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &amp;#39;bz;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// I2C clock divider: Divides system clock to generate i2c_clk&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; clk) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (counter2 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; (DIVIDE_BY &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i2c_clk &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;i2c_clk;    &lt;span style=&#34;color:#75715e&#34;&gt;// Toggle i2c_clk when half period is reached&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            counter2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;          &lt;span style=&#34;color:#75715e&#34;&gt;// Reset the divider counter&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            counter2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; counter2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Increment the divider counter&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Enable/disable I2C clock based on current state&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;negedge&lt;/span&gt; i2c_clk &lt;span style=&#34;color:#66d9ef&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; rst) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rst &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i2c_scl_enable &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;    &lt;span style=&#34;color:#75715e&#34;&gt;// Disable SCL on reset&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((state &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; IDLE) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (state &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; START) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (state &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; STOP)) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                i2c_scl_enable &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// SCL is disabled in IDLE, START, and STOP states&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                i2c_scl_enable &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Enable SCL in other states&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// State machine for controlling the I2C master operation&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; i2c_clk &lt;span style=&#34;color:#66d9ef&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; rst) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rst &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; IDLE;          &lt;span style=&#34;color:#75715e&#34;&gt;// Reset state to IDLE on reset&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; (state)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                IDLE: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (enable) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; START;  &lt;span style=&#34;color:#75715e&#34;&gt;// Start I2C transaction when enable is high&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        saved_addr &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; {addr, rw};  &lt;span style=&#34;color:#75715e&#34;&gt;// Save the 7-bit address and RW bit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        saved_data &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; data_in;     &lt;span style=&#34;color:#75715e&#34;&gt;// Save the data to be sent (in write mode)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                START: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    counter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;          &lt;span style=&#34;color:#75715e&#34;&gt;// Initialize bit counter to 7 for 8-bit transmission&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; ADDRESS;      &lt;span style=&#34;color:#75715e&#34;&gt;// Move to ADDRESS state&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ADDRESS: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (counter &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; READ_ACK;  &lt;span style=&#34;color:#75715e&#34;&gt;// Move to ACK check after sending address and RW bit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        counter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; counter &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// Transmit address bits, count down&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                READ_ACK: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i2c_sda &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// ACK received (SDA pulled low by slave)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        counter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;       &lt;span style=&#34;color:#75715e&#34;&gt;// Reset bit counter&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (saved_addr[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; WRITE_DATA; &lt;span style=&#34;color:#75715e&#34;&gt;// If RW=0, go to write mode&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; READ_DATA;                     &lt;span style=&#34;color:#75715e&#34;&gt;// If RW=1, go to read mode&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; STOP;      &lt;span style=&#34;color:#75715e&#34;&gt;// NACK received, move to STOP state&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                WRITE_DATA: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (counter &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; READ_ACK2; &lt;span style=&#34;color:#75715e&#34;&gt;// Move to second ACK check after data transmission&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        counter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; counter &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Transmit data bits, count down&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                READ_ACK2: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((i2c_sda &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (enable &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; IDLE; &lt;span style=&#34;color:#75715e&#34;&gt;// Return to IDLE on ACK&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; STOP;  &lt;span style=&#34;color:#75715e&#34;&gt;// If NACK received or enable low, go to STOP&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                READ_DATA: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    data_out[counter] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; i2c_sda;  &lt;span style=&#34;color:#75715e&#34;&gt;// Capture data bit from SDA line&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (counter &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; WRITE_ACK; &lt;span style=&#34;color:#75715e&#34;&gt;// After last bit, go to WRITE_ACK&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; counter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; counter &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Count down for each bit received&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                WRITE_ACK: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; STOP;  &lt;span style=&#34;color:#75715e&#34;&gt;// Go to STOP after sending ACK&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                STOP: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; IDLE;  &lt;span style=&#34;color:#75715e&#34;&gt;// Go back to IDLE after STOP condition&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;endcase&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// SDA output logic based on the current state&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;negedge&lt;/span&gt; i2c_clk &lt;span style=&#34;color:#66d9ef&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; rst) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rst &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            write_enable &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;       &lt;span style=&#34;color:#75715e&#34;&gt;// Drive SDA high on reset&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            sda_out &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; (state)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                START: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    write_enable &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// Enable SDA for start condition&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    sda_out &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;       &lt;span style=&#34;color:#75715e&#34;&gt;// Pull SDA low for start condition&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ADDRESS: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    sda_out &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; saved_addr[counter]; &lt;span style=&#34;color:#75715e&#34;&gt;// Send each bit of the address and RW bit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                READ_ACK: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    write_enable &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// Release SDA to allow slave to drive ACK/NACK&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                WRITE_DATA: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    write_enable &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// Enable SDA for data transmission&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    sda_out &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; saved_data[counter]; &lt;span style=&#34;color:#75715e&#34;&gt;// Output each bit of data to SDA&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                WRITE_ACK: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    write_enable &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// Enable SDA for ACK transmission&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    sda_out &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;       &lt;span style=&#34;color:#75715e&#34;&gt;// Send ACK by pulling SDA low&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                READ_DATA: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    write_enable &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// Release SDA to read data from slave&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                STOP: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    write_enable &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// Enable SDA for stop condition&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    sda_out &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;       &lt;span style=&#34;color:#75715e&#34;&gt;// Release SDA to indicate stop&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;endcase&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;explanation---&#34;&gt;Explanation &amp;ndash;&amp;gt;&lt;/h5&gt;&#xA;&lt;h5 id=&#34;slave&#34;&gt;SLAVE&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; i2c_slave(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] addr_in,   &lt;span style=&#34;color:#75715e&#34;&gt;// Slave address to respond to (dynamic address input)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;inout&lt;/span&gt; sda,             &lt;span style=&#34;color:#75715e&#34;&gt;// I2C data line (SDA) - bidirectional&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;inout&lt;/span&gt; scl              &lt;span style=&#34;color:#75715e&#34;&gt;// I2C clock line (SCL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Define states for the I2C slave FSM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;localparam&lt;/span&gt; READ_ADDR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;   &lt;span style=&#34;color:#75715e&#34;&gt;// State for reading the address from the master&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;localparam&lt;/span&gt; SEND_ACK &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;    &lt;span style=&#34;color:#75715e&#34;&gt;// State for sending ACK after receiving a matching address&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;localparam&lt;/span&gt; READ_DATA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;   &lt;span style=&#34;color:#75715e&#34;&gt;// State for reading data from the master&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;localparam&lt;/span&gt; WRITE_DATA &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// State for sending data to the master&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;localparam&lt;/span&gt; SEND_ACK2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;;   &lt;span style=&#34;color:#75715e&#34;&gt;// State for sending ACK after receiving data from the master&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] addr;             &lt;span style=&#34;color:#75715e&#34;&gt;// Register to store the address received from the master&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] counter;          &lt;span style=&#34;color:#75715e&#34;&gt;// Bit counter for data/address transmission&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;        &lt;span style=&#34;color:#75715e&#34;&gt;// Current state of the FSM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] data_in &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;      &lt;span style=&#34;color:#75715e&#34;&gt;// Register to store data received from the master&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] data_out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;#39;b11001100&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// Data to be sent to the master in read mode&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; sda_out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;            &lt;span style=&#34;color:#75715e&#34;&gt;// Data to drive onto SDA when write_enable is high&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; sda_in &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;             &lt;span style=&#34;color:#75715e&#34;&gt;// Register to capture SDA input data&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;              &lt;span style=&#34;color:#75715e&#34;&gt;// Flag to indicate the start condition (SDA goes low while SCL is high)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt; write_enable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;       &lt;span style=&#34;color:#75715e&#34;&gt;// Controls whether the slave drives the SDA line&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Tri-state SDA line: driven by sda_out when write_enable is high, otherwise high-impedance&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;assign&lt;/span&gt; sda &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (write_enable &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; sda_out &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &amp;#39;bz;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Detect start condition on SDA falling edge when SCL is high&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;negedge&lt;/span&gt; sda) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((start &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (scl &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            start &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;           &lt;span style=&#34;color:#75715e&#34;&gt;// Set start flag&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            counter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;         &lt;span style=&#34;color:#75715e&#34;&gt;// Initialize counter to read 8 bits (address or data)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Detect stop condition on SDA rising edge when SCL is high&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; sda) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((start &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (scl &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; READ_ADDR;   &lt;span style=&#34;color:#75715e&#34;&gt;// Go to READ_ADDR state to read the address from master&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            start &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;           &lt;span style=&#34;color:#75715e&#34;&gt;// Clear start flag&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            write_enable &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;    &lt;span style=&#34;color:#75715e&#34;&gt;// Release SDA line&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// State machine for I2C slave behavior, triggered on rising edge of SCL&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; scl) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (start &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;// Only proceed if start condition was detected&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;(state)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                READ_ADDR: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    addr[counter] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; sda;      &lt;span style=&#34;color:#75715e&#34;&gt;// Capture address bit from SDA&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(counter &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; SEND_ACK;     &lt;span style=&#34;color:#75715e&#34;&gt;// Move to SEND_ACK after receiving full address&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        counter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; counter &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Count down to receive 8 bits&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                SEND_ACK: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;// Check if received address matches slave address (addr_in)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(addr[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; addr_in) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        counter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;;          &lt;span style=&#34;color:#75715e&#34;&gt;// Reset bit counter for next data frame&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#75715e&#34;&gt;// Determine next state based on R/W bit (addr[0])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(addr[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; READ_DATA; &lt;span style=&#34;color:#75715e&#34;&gt;// If R/W=0, master wants to write, go to READ_DATA&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; WRITE_DATA; &lt;span style=&#34;color:#75715e&#34;&gt;// If R/W=1, master wants to read, go to WRITE_DATA&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; READ_ADDR;    &lt;span style=&#34;color:#75715e&#34;&gt;// Address mismatch, go back to READ_ADDR&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                READ_DATA: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    data_in[counter] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; sda;   &lt;span style=&#34;color:#75715e&#34;&gt;// Capture data bit from SDA&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(counter &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; SEND_ACK2;    &lt;span style=&#34;color:#75715e&#34;&gt;// Move to SEND_ACK2 after receiving full byte&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        counter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; counter &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Count down to receive 8 bits&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                SEND_ACK2: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; READ_ADDR;        &lt;span style=&#34;color:#75715e&#34;&gt;// Go back to READ_ADDR to listen for next address&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                WRITE_DATA: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;// Transmit data_out to master one bit at a time&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(counter &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        state &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; READ_ADDR;    &lt;span style=&#34;color:#75715e&#34;&gt;// After last bit, go back to READ_ADDR&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        counter &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; counter &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Count down for each bit sent&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;endcase&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Control SDA output behavior on falling edge of SCL, depending on the state&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt; @(&lt;span style=&#34;color:#66d9ef&#34;&gt;negedge&lt;/span&gt; scl) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;(state)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            READ_ADDR: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                write_enable &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;           &lt;span style=&#34;color:#75715e&#34;&gt;// Release SDA while reading address&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            SEND_ACK: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                sda_out &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; (addr[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; addr_in) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Send ACK (low) if address matches, else NACK (high)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                write_enable &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;           &lt;span style=&#34;color:#75715e&#34;&gt;// Enable SDA to drive ACK/NACK&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            READ_DATA: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                write_enable &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;           &lt;span style=&#34;color:#75715e&#34;&gt;// Release SDA while reading data&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            WRITE_DATA: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                sda_out &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; data_out[counter]; &lt;span style=&#34;color:#75715e&#34;&gt;// Send each bit of data_out on SDA&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                write_enable &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;           &lt;span style=&#34;color:#75715e&#34;&gt;// Enable SDA to drive data&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            SEND_ACK2: &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                sda_out &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;                &lt;span style=&#34;color:#75715e&#34;&gt;// Send ACK (low) after receiving data&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                write_enable &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;           &lt;span style=&#34;color:#75715e&#34;&gt;// Enable SDA to drive ACK&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;endcase&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;explanation&#34;&gt;Explanation&lt;/h5&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/protocols/i2cv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/protocols/i2cv/</guid>
      <description>&lt;h2 id=&#34;i2c-protocol-verilog-implementation-using-fsmhttpsgithubcommummanajagadeeshi2c-protocol-verilog&#34;&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/I2C-protocol-verilog&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;I2C Protocol Verilog Implementation using FSM&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/i2c-protocol-verilog-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;I2C Protocol&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Verilog Implementation of I2C Protocol using Finite State Machine (FSM) design&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;06 Nov 2024&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/I2C-protocol-verilog&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;I2CV🔗&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Individual&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Level&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Beginner&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;HDL, Protocols, Programming&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tools Used&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Verilog, Icarus, Xilinx&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;On Hold&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;!-- | **Progress**      | - Implemented edge detection algorithms: Prewitt, Sobel, Canny, and Moravec corner detection. &lt;br&gt; - Applied blurring filters: Gaussian, Median, Box, and Bilateral. &lt;br&gt; - Completed geometric operations: Rotation, Translation, Shearing, Cropping, and Reflection. &lt;br&gt; - Integrated thresholding techniques: Global Thresholding, Adaptive Thresholding, Otsu’s Method, and Color Thresholding. &lt;br&gt; - Developed subprojects: Label detection (Done), Document scanner (Ongoing), License plate detection (To be started), Stereo camera matching (Almost done). |  &#xD;&#xA;| **Next Steps**    | - Develop a synthesizable module as a proof of concept. &lt;br&gt; - Implement morphological operations: Dilation, Closing, Opening. |   --&gt;&#xD;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;This project implements the I2C protocol in Verilog with various versions and configurations. Below is a summary of each version:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/rose/rv32i/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/rose/rv32i/</guid>
      <description>&lt;h3 id=&#34;rv32i-cpu-core&#34;&gt;RV32I CPU CORE&lt;/h3&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;&#xD;&#xA;      &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;      &#xD;&#xA;&#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;        &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;      &#xD;&#xA;      &#xD;&#xA;          &lt;img&#xD;&#xA;            title=&#34;&#34;&#xD;&#xA;            loading=&#34;lazy&#34;&#xD;&#xA;            decoding=&#34;async&#34;&#xD;&#xA;            class=&#34;img  &#34;&#xD;&#xA;            width=&#34;1991&#34;&#xD;&#xA;            height=&#34;3187&#34;&#xD;&#xA;            src=&#34;http://localhost:1313/images/projects/sanganak/rv32i_hu10364121658834332110.webp&#34;&#xD;&#xA;            alt=&#34;RV32I&#34;&#xD;&#xA;            onerror=&#34;this.onerror=&#39;null&#39;;this.src=&#39;\/images\/projects\/sanganak\/rv32i_hu10389664333019388688.png&#39;&#34; /&gt;&#xD;&#xA;      &#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  &lt;script&gt;&#xD;&#xA;    window.addEventListener(&#34;load&#34;, (e) =&gt; {&#xD;&#xA;      const lightbox = GLightbox();&#xD;&#xA;    });&#xD;&#xA;  &lt;/script&gt;&#xD;&#xA;&#xD;&#xA;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/rose-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;p&gt;This project implements a basic RV32I RISC-V processor core using TL-Verilog. The processor is capable of executing the base integer instruction set, with an example program that calculates the sum of integers from 1 to 9. The code is written for Makerchip and is fully synthesizable and testable in simulation.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/rubec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/rubec/</guid>
      <description>&lt;h2 id=&#34;ru83c-rubiks-cube-solving-robothttpsgithubcommummanajagadeeshru83c&#34;&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/RU83C/&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;RU83C: Rubik&amp;rsquo;s Cube Solving Robot&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/ru83c-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/v-ru81k5cu83-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;RU83C&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Rubik&amp;rsquo;s Cube-solving robot using Kociemba algorithm, featuring computer vision for state detection, mechanical design for cube manipulation, and electronics for execution.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Ideation(July 2023), Implementation(Aug 2023)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/RU83C/&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;RU83C🔗&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Individual&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Level&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Beginner&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Algorithms, Programming, Game Dev&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tools Used&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Blender, Unity3D, Python, C#, VS Code, OpenCV, Fusion 360, ArduinoIDE&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Ongoing (Passive)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Progress&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- Unity3D implementation is done. &lt;br&gt; - Mechanical Design is started in Fusion 360 &lt;br&gt; - CV part code is ready, color ranges yet to be tuned&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Next Steps&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- CV (Computer Vision): Responsible for recognizing the scrambled state of the cube via a camera. &lt;br&gt; - Mechanical Design: Focused on the creation of the holder and gripping mechanisms to manipulate the cube.  &lt;br&gt; - Electronics: Controls and coordinates the robot’s movements based on the computed solution.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;overview&#34;&gt;Overview&lt;/h4&gt;&#xA;&lt;p&gt;RU83C is a Rubik&amp;rsquo;s Cube-solving robot that leverages computer vision (CV), mechanical design, and electronics to solve a scrambled Rubik&amp;rsquo;s Cube using the Kociemba algorithm. The robot features a camera that captures the current state of the scrambled cube, processes the image using CV, and calculates the solution. A mechanical holder grips the cube securely, and the robot executes the necessary moves to solve it.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/shopping-cart-bot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/shopping-cart-bot/</guid>
      <description>&lt;h2 id=&#34;shopping-cart-bothttpsgithubcommummanajagadeeshshopping-cart-bot-rig&#34;&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/shopping-cart-bot-rig&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;Shopping Cart Bot&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/shopping-cart-bot-rig-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;Shopping Cart Bot&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;The Shopping Cart Bot is a robotics project designed to automate the shopping experience by utilizing computer vision and autonomous navigation. The bot follows a person, detects and classifies items placed in the cart, and categorizes them based on predefined labels such as food, electronics, and clothing. Additionally, it integrates barcode recognition, label detection, and a payment system to streamline the checkout process.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;30 Sep 2024&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/shopping-cart-bot-rig&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;Shopping Cart Bot🔗&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Individual&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Level&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Beginner&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Computer Vision, Programming&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tools Used&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Webots, ROS2, GeminiAPI, PyQt, Python, OpenCV&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;On Hold&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;!-- | **Progress**      | - Implemented edge detection algorithms: Prewitt, Sobel, Canny, and Moravec corner detection. &lt;br&gt; - Applied blurring filters: Gaussian, Median, Box, and Bilateral. &lt;br&gt; - Completed geometric operations: Rotation, Translation, Shearing, Cropping, and Reflection. &lt;br&gt; - Integrated thresholding techniques: Global Thresholding, Adaptive Thresholding, Otsu’s Method, and Color Thresholding. &lt;br&gt; - Developed subprojects: Label detection (Done), Document scanner (Ongoing), License plate detection (To be started), Stereo camera matching (Almost done). |  &#xD;&#xA;| **Next Steps**    | - Develop a synthesizable module as a proof of concept. &lt;br&gt; - Implement morphological operations: Dilation, Closing, Opening. |   --&gt;&#xD;&#xA;&lt;p&gt;The &lt;strong&gt;Shopping Cart Bot&lt;/strong&gt; is a robotics project designed to automate the shopping experience by utilizing computer vision and autonomous navigation. The bot follows a person, detects and classifies items placed in the cart, and categorizes them based on predefined labels such as food, electronics, and clothing. Additionally, it integrates barcode recognition, label detection, and a payment system to streamline the checkout process.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/projects/tlcv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/tlcv/</guid>
      <description>&lt;h2 id=&#34;traffic-light-controller-httpsgithubcommummanajagadeeshtrafficlightcontroller-verilog&#34;&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/TrafficLightController-verilog&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;TRAFFIC LIGHT CONTROLLER 🚦&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/trafficlightcontroller-verilog-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;TLC using Verilog&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Verilog Implementation of Traffic Light Controller&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;05 Apr 2024&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/TrafficLightController-verilog&#34;&#xA;&#xA;&#xA;&#xA;&#xA; target=&#34;_blank&#34;&#xA; &#xA;&#xA;&#xA;&gt;TLCV🔗&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Individual&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Level&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Beginner&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;HDL, Programming&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tools Used&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Verilog, Icarus, Xilinx&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;On Hold&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The original version, which utilizes FSM, is currently on hold. Here is the base version, which does not use FSM and instead relies directly on Boolean logic expressions. Below is the explanation for the base version.&lt;/p&gt;</description>
    </item>
    <item>
      <title>:~$ whoami</title>
      <link>http://localhost:1313/about_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about_1/</guid>
      <description>&lt;!-- ##### /jagadeesh97 --&gt;&#xD;&#xA;&lt;p&gt;I’m from Visakhapatnam, Andhra Pradesh, and currently a &lt;strong&gt;sophomore at NIT Calicut&lt;/strong&gt;, studying &lt;strong&gt;Electronics and Communication Engineering&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About ME</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>&lt;!-- ##### /jagadeesh97 --&gt;&#xD;&#xA;&lt;p&gt;I’m from Visakhapatnam, Andhra Pradesh, and currently a &lt;strong&gt;sophomore at NIT Calicut&lt;/strong&gt;, studying &lt;strong&gt;Electronics and Communication Engineering&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ANAV for Martian Surface Exploration</title>
      <link>http://localhost:1313/projects/isro-anav/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/isro-anav/</guid>
      <description>&lt;!-- ## [ANAV for Martian Surface Exploration](https://github.com/rignitc/isro-irocu-2k25) --&gt;&#xD;&#xA;&lt;h2 style=&#34;color: #A45D5D; text-decoration: underline;&#34;&gt;&#xD;&#xA;  &lt;a href=&#34;https://github.com/rignitc/isro-irocu-2k25&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; style=&#34;color: inherit; text-decoration: inherit;&#34;&gt;&#xD;&#xA;    ANAV for Martian Surface Exploration&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h2&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;ISRO-ANAV&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;The designed ANAV is a sub-2 kg rotorcraft built for GNSS-denied environments, capable of autonomous take-off, terrain scanning, safe landing, and return. It operates solely on battery power, uses RF communication, and integrates onboard sensing and navigation algorithms without external aids&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Dec 2024&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/rignitc/isro-irocu-2k25&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; style=&#34;text-decoration: underline;&#34;&gt;  ISRO-ANAV🔗&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Team ISRO (RIG)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Level&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Intermediate&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Aerial Robotics, Simulation, Programming&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tools Used&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;ROS2, VINS Fusion, ESP32, MissionPlanner, Webots, Python&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Ongoing&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title>Basic RV32I RTL CPU Design</title>
      <link>http://localhost:1313/projects/rose/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/rose/</guid>
      <description>&lt;!-- #### [ANAV for Martian Surface Exploration](https://github.com/rignitc/isro-irocu-2k25) --&gt;&#xD;&#xA;&lt;h4 style=&#34;color: #A45D5D; text-decoration: underline;&#34;&gt;&#xD;&#xA;  &lt;a href=&#34;https://github.com/Mummanajagadeesh/rose&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; style=&#34;color: inherit; text-decoration: inherit;&#34;&gt;&#xD;&#xA;    Basic RV32I RTL CPU Design&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h4&gt;&#xD;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/rose-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;ROSE&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;strong&gt;RoSe (RISC-V Open-Source Environment)&lt;/strong&gt; is a set of learning-focused experiments exploring the design of a RISC-V processor using only open-source tools. Each version tackles a different aspect of CPU design—from simulation to high-level abstraction to physical design. These are standalone efforts and not part of a continuous development flow.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Start&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Mar 2025&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Repository&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/Mummanajagadeesh/rose/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; style=&#34;text-decoration: underline;&#34;&gt;  ROSE🔗&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Individual&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Level&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Beginner&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Skills&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Computer Architechture&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Tools Used&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;TL-Verilog, Colab, Xilinx, OpenLane&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Current Status&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Ongoing&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Basic Sensor-Based Mobile Robots</title>
      <link>http://localhost:1313/projects/gpbot/subprojects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/gpbot/subprojects/</guid>
      <description>&lt;br&gt;&#xD;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/gpbot-w-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/differential-drive-robot-w-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/line-follower-robot-w-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/obstacle-avoidance-robot-w-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&#xA;&lt;img src=&#34;https://github.com/Mummanajagadeesh/Mummanajagadeesh/blob/main/repos/wall-follower-robot-w-dark.svg?raw=true&#34; height=&#34;800&#34; alt=&#34;NEVER&#34;&gt;&#xD;&#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contact</title>
      <link>http://localhost:1313/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/contact/</guid>
      <description></description>
    </item>
    <item>
      <title>Courses</title>
      <link>http://localhost:1313/about/courses/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/courses/</guid>
      <description>&lt;h6 id=&#34;edx&#34;&gt;&lt;strong&gt;EDX&lt;/strong&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;CS50P 2022&lt;/strong&gt; Harvard | Jan&#39;24&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;CS50X 2024&lt;/strong&gt; Harvard | Sep&#39;24&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;coursera&#34;&gt;&lt;strong&gt;Coursera&lt;/strong&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Build a Modern Computer from First Principles: From Nand to Tetris (Project-Centered Course)&lt;/strong&gt; Hebrew University&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Robotics Specialisation&lt;/strong&gt; University of Pennsylvania&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Other Achievements [Secondary School]</title>
      <link>http://localhost:1313/about/achievements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/achievements/</guid>
      <description>&lt;div class=&#34;extras-highlight&#34;&gt;&#xD;&#xA;&lt;h6 id=&#34;karate-black-belt-dan--holder&#34;&gt;&lt;strong&gt;Karate Black Belt [DAN Ⅰ] Holder&lt;/strong&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Achieved a &lt;strong&gt;Black Belt (DAN Ⅰ)&lt;/strong&gt; in Karate&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;h6 id=&#34;gold-medalist--district-level-karate-tournament&#34;&gt;&lt;strong&gt;Gold Medalist – District Level Karate Tournament&lt;/strong&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Secured &lt;strong&gt;1st place&lt;/strong&gt; in a district-level Karate tournament&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--, showcasing excellence in martial arts --&gt;&#xD;&#xA;&lt;h6 id=&#34;sports-kid-of-the-year-2018-19&#34;&gt;&lt;strong&gt;Sports Kid of the Year [2018-19]&lt;/strong&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Honored as the &lt;strong&gt;Sports Kid of the Year 2018&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA; &lt;!-- for outstanding performance across multiple sports disciplines --&gt;&#xD;&#xA;&lt;!-- ###### **Creative Kid of the Year [2018-19] – Nominee**  &#xD;&#xA;- Recognized for creativity and innovation in various fields, making it to the final nominee list  --&gt;&#xD;&#xA;&lt;h6 id=&#34;gold-medalist--essay-writing&#34;&gt;&lt;strong&gt;Gold Medalist – Essay Writing&lt;/strong&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Won &lt;strong&gt;1st place&lt;/strong&gt; in an &lt;strong&gt;essay writing competition&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--, demonstrating strong writing and analytical skills --&gt;&#xD;&#xA;&lt;h6 id=&#34;silver-medalist--vedic-math&#34;&gt;&lt;strong&gt;Silver Medalist – Vedic Math&lt;/strong&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Achieved &lt;strong&gt;2nd place&lt;/strong&gt; in a &lt;strong&gt;Vedic Mathematics competition&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA; &lt;!--, excelling in mental arithmetic and problem-solving --&gt;</description>
    </item>
    <item>
      <title>Personal Accomplishments and Competitions</title>
      <link>http://localhost:1313/about/accomplishments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/accomplishments/</guid>
      <description>&lt;div class=&#34;extras-highlight&#34;&gt;&#xD;&#xA;&lt;h6 id=&#34;india-semiconductor-workforce-development-program-fellowship--grade-i-awardee-individual-may-25&#34;&gt;&lt;strong&gt;India Semiconductor Workforce Development Program Fellowship – Grade I Awardee&lt;/strong&gt; &lt;em&gt;(Individual, May &amp;lsquo;25)&lt;/em&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Selected among the &lt;strong&gt;top candidates out of 2,800+ applicants&lt;/strong&gt; for the &lt;strong&gt;ISWDP Fellowship (Grade I)&lt;/strong&gt;, hosted by &lt;strong&gt;IISc, Synopsys, and Samsung&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div class=&#34;extras-highlight&#34;&gt;&#xD;&#xA;&lt;h6 id=&#34;isro-iroc-u-robotics-challenge--round-1-qualified-team-dec-24&#34;&gt;&lt;strong&gt;ISRO IROC-U Robotics Challenge – Round 1 Qualified&lt;/strong&gt; &lt;em&gt;(Team, Dec &amp;lsquo;24)&lt;/em&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Designing an &lt;strong&gt;autonomous drone&lt;/strong&gt; for &lt;strong&gt;Martian surface&lt;/strong&gt; exploration, enabling autonomous operation in &lt;strong&gt;GNSS-denied&lt;/strong&gt; environments&lt;/li&gt;&#xA;&lt;li&gt;Successfully &lt;strong&gt;qualified for Elimination Round&lt;/strong&gt;; &lt;strong&gt;Round 3 is ongoing&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;h6 id=&#34;circuit-conclave--nitc-tathva--1st-place-team-oct-24&#34;&gt;&lt;strong&gt;Circuit Conclave | NITC Tathva – 1st Place&lt;/strong&gt; &lt;em&gt;(Team, Oct &amp;lsquo;24)&lt;/em&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Secured &lt;strong&gt;1st place&lt;/strong&gt; in &lt;strong&gt;Circuit Conclave&lt;/strong&gt;, an electronics design competition focused on innovative circuit solutions&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;disarmamine--nitc-tathva--3rd-place-team-oct-24&#34;&gt;&lt;strong&gt;Disarmamine | NITC Tathva – 3rd Place&lt;/strong&gt; &lt;em&gt;(Team, Oct &amp;lsquo;24)&lt;/em&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Achieved &lt;strong&gt;3rd place&lt;/strong&gt; in &lt;strong&gt;Disarmamine&lt;/strong&gt;, showcasing expertise in electronics and problem-solving&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;robotrix24--nit-surathkal--1st-round-qualified-individual-dec-24&#34;&gt;&lt;strong&gt;Robotrix&#39;24 | NIT Surathkal – 1st Round Qualified&lt;/strong&gt; &lt;em&gt;(Individual, Dec &amp;lsquo;24)&lt;/em&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Successfully cleared &lt;strong&gt;Round 1&lt;/strong&gt; of &lt;strong&gt;Robotrix&#39;24&lt;/strong&gt; and participated in the &lt;strong&gt;24-hour robotics simulation hackathon (Round 2)&lt;/strong&gt; using &lt;strong&gt;CoppeliaSim&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;digital-circuit-design-challenge--nit-trichy--1st-round-qualified-team-feb-25&#34;&gt;&lt;strong&gt;Digital Circuit Design Challenge | NIT Trichy – 1st Round Qualified&lt;/strong&gt; &lt;em&gt;(Team, Feb &amp;lsquo;25)&lt;/em&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Cleared &lt;strong&gt;Round 1&lt;/strong&gt; in &lt;strong&gt;Digital Circuit Design Challenge&lt;/strong&gt;, a challenge focusing on digital electronics and logic design&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;flipkart-grid-robotics-challenge--1st-round-qualified-individual-aug-24&#34;&gt;&lt;strong&gt;Flipkart GRID Robotics Challenge – 1st Round Qualified&lt;/strong&gt; &lt;em&gt;(Individual, Aug &amp;lsquo;24)&lt;/em&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Advanced past &lt;strong&gt;Round 1&lt;/strong&gt; in the &lt;strong&gt;Flipkart GRID Robotics Challenge&lt;/strong&gt;, an AI-driven robotics competition&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;hr&gt;&#xA;&lt;h6 id=&#34;aws-aiml-nano-degree-scholarship--udacity--amazon-mar-24&#34;&gt;&lt;strong&gt;AWS AI/ML Nano Degree Scholarship | Udacity &amp;amp; Amazon&lt;/strong&gt; &lt;em&gt;(Mar &amp;lsquo;24)&lt;/em&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Completed &lt;strong&gt;two AI/ML courses&lt;/strong&gt; and cleared &lt;strong&gt;evaluation test&lt;/strong&gt; as part of the &lt;strong&gt;AWS AI/ML Scholarship Program&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Trained an &lt;strong&gt;autonomous racing car&lt;/strong&gt; using &lt;strong&gt;reinforcement learning (RL)&lt;/strong&gt; to compete against a lap, making it to the &lt;strong&gt;leaderboards&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Became &lt;strong&gt;eligible to apply&lt;/strong&gt; for the &lt;strong&gt;AWS AI/ML Nano Degree Scholarship&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;hr&gt;&#xA;&lt;h6 id=&#34;c2s-chip-to-startup-digital-hackathon--participated-team-feb-25&#34;&gt;&lt;strong&gt;C2S Chip to Startup &amp;ldquo;Digital Hackathon&amp;rdquo; – Participated&lt;/strong&gt; &lt;em&gt;(Team, Feb &amp;lsquo;25)&lt;/em&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Competed in &lt;strong&gt;Digital Hackathon&lt;/strong&gt; with a focus on &lt;strong&gt;digital electronics&lt;/strong&gt;, organized under &lt;strong&gt;C2S Chip to Startup&lt;/strong&gt; by &lt;strong&gt;Ministry of Electronics &amp;amp; Information Technology (MeitY)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;nokia-fpga-hackathon--participated-team-mar-25&#34;&gt;&lt;strong&gt;Nokia FPGA Hackathon – Participated&lt;/strong&gt; &lt;em&gt;(Team, Mar &amp;lsquo;25)&lt;/em&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Participated in &lt;strong&gt;FPGA Based Quiz&lt;/strong&gt; as part of the &lt;strong&gt;Round 1&lt;/strong&gt; of the competition&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;bajaj-auto-ohm-challenge--participated-team-feb-25&#34;&gt;&lt;strong&gt;Bajaj Auto Ohm Challenge – Participated&lt;/strong&gt; &lt;em&gt;(Team, Feb &amp;lsquo;25)&lt;/em&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Took part in the &lt;strong&gt;Bajaj Auto Ohm Challenge&lt;/strong&gt;, an engineering competition emphasizing &lt;strong&gt;electrical and electronic innovations&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;bharatiya-antariksh-hackathon-bah-24--participated-team-july-24&#34;&gt;&lt;strong&gt;Bharatiya Antariksh Hackathon (BAH &amp;lsquo;24) – Participated&lt;/strong&gt; &lt;em&gt;(Team, July &amp;lsquo;24)&lt;/em&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Developed an &lt;strong&gt;AI/ML-based system&lt;/strong&gt; for &lt;strong&gt;automatic detection of craters and boulders&lt;/strong&gt; from &lt;strong&gt;Orbiter High-Resolution Camera (OHRC) images&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Focused on &lt;strong&gt;enhancing planetary exploration&lt;/strong&gt; through automation and computer vision&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;bit-n-build-around-the-world-2024--participated-individual-oct-24&#34;&gt;&lt;strong&gt;Bit N Build Around The World 2024 – Participated&lt;/strong&gt; &lt;em&gt;(Individual, Oct &amp;lsquo;24)&lt;/em&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;24-hour hackathon; worked on &lt;strong&gt;prediction of city traffic using computer vision&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Competed under the &lt;strong&gt;AI/ML domain&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Positions of Responsibility &amp; Volunteer Work</title>
      <link>http://localhost:1313/about/positions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/positions/</guid>
      <description>&lt;!-- ## Positions Held --&gt;&#xD;&#xA;&lt;div class=&#34;extras-highlight&#34;&gt;&#xD;&#xA;&lt;h6 id=&#34;rignitc-tech-member--nov24---forever&#34;&gt;&lt;strong&gt;RIGNITC Tech Member | Nov&#39;24 - Forever&lt;/strong&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;RIGNITC - Robotics Interest Group @ NITC&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Worked on several real-world interdisciplinary projects as part of robotics enthusiast teams; exhibited lab projects during institute-level and public events&lt;/li&gt;&#xA;&lt;li&gt;Represented NITC in &lt;strong&gt;national and international-level hardware competitions&lt;/strong&gt;, showcasing technical skills and team collaboration&lt;/li&gt;&#xA;&lt;li&gt;Assisted in explaining lab visits to students from various schools, helping bridge the gap between theory and application&lt;/li&gt;&#xA;&lt;li&gt;Conducted peer-to-peer sessions and technical workshops on robotics, embedded systems, and related topics to promote technical learning&lt;/li&gt;&#xA;&lt;li&gt;Helped in organizing &lt;strong&gt;ORIGO&#39;25&lt;/strong&gt;, the annual tech workshop by team RIG, managing both logistics and hands-on sessions&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div class=&#34;extras-highlight&#34;&gt;&#xD;&#xA;&lt;h6 id=&#34;ecea-executive-assistant--event-management--techincal-team--oct24---present&#34;&gt;&lt;strong&gt;ECEA Executive Assistant | Event Management | Techincal Team , Oct&#39;24 - Present&lt;/strong&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;ECEA - Electronics And Communication Engineering Association @ NITC&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Helped plan and manage workshops, tech seminars, and project demos in the ECE department, ensuring smooth execution and strong student turnout&lt;/li&gt;&#xA;&lt;li&gt;Assisted first-year students in connecting with faculty&lt;/li&gt;&#xA;&lt;li&gt;Coordinated with alumni for sessions and communication, gaining insights into industry and career opportunities&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;hr&gt;&#xA;&lt;hr&gt;&#xA;&lt;h6 id=&#34;tathva24-junior-executive--tech-conclave-committee-oct24&#34;&gt;&lt;strong&gt;Tathva&#39;24 Junior Executive | Tech Conclave Committee, Oct&#39;24&lt;/strong&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Tathva - South India&amp;rsquo;s Largest Techno-management Fest @ NITC&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Reaching out to YouTubers and influencers via cold emails to invite them to the event; successfully secured one guest attendee&lt;/li&gt;&#xA;&lt;li&gt;Contributed to content writing and poster ideation for event promotion&lt;/li&gt;&#xA;&lt;li&gt;Managed crowd coordination and logistics on the event day&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;hr&gt;&#xA;&lt;h6 id=&#34;reliance-foundation-mentor-for-scholars&#34;&gt;&lt;strong&gt;Reliance Foundation Mentor for Scholars&lt;/strong&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Reliance Foundation&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Guiding freshmen and sophomores on &lt;strong&gt;core engineering concepts&lt;/strong&gt;, coding skills, and internship opportunities&lt;/li&gt;&#xA;&lt;li&gt;Providing personalized &lt;strong&gt;support&lt;/strong&gt; to clarify doubts related to their &lt;strong&gt;projects and coursework&lt;/strong&gt; within my domain&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;scientific-volunteer--sep23&#34;&gt;&lt;strong&gt;Scientific Volunteer | Sep&#39;23&lt;/strong&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Institute for Plasma Research (IPR × NITC) | Plasma Exhibition&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Trained to explain plasma science, its applications, and nuclear fusion to exhibition visitors&lt;/li&gt;&#xA;&lt;li&gt;Demonstrated and provided in-depth explanations of &lt;strong&gt;5+ plasma exhibits&lt;/strong&gt; to over &lt;strong&gt;100 students&lt;/strong&gt;, detailing their functions and construction while addressing queries&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;asteroid-hunter--may-24---aug-24&#34;&gt;&lt;strong&gt;Asteroid Hunter | May &amp;lsquo;24 - Aug &amp;lsquo;24&lt;/strong&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;International Astronomical Search Collaboration (IASC × NASA × Saptarshi India | STAC)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;Trained in using &lt;strong&gt;Astrometrica&lt;/strong&gt; software to analyze astronomical data for asteroid detection&lt;/li&gt;&#xA;&lt;li&gt;Identified &lt;strong&gt;10+ potential asteroid&lt;/strong&gt; signatures as part of &lt;strong&gt;NASA’s Citizen Science&lt;/strong&gt; initiative&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Privacy Policy</title>
      <link>http://localhost:1313/privacy-policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/privacy-policy/</guid>
      <description>&lt;h3 id=&#34;why-this-page-exists&#34;&gt;Why This Page Exists?&lt;/h3&gt;&#xA;&lt;p&gt;No one usually checks what’s in here — but if you&amp;rsquo;re reading this, you&amp;rsquo;re clearly more thorough than most&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projects</title>
      <link>http://localhost:1313/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/</guid>
      <description></description>
    </item>
    <item>
      <title>Scholarships Received</title>
      <link>http://localhost:1313/about/scholarships/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/scholarships/</guid>
      <description>&lt;div class=&#34;extras-highlight&#34;&gt;&#xD;&#xA;&lt;h6 id=&#34;india-semiconductor-workforce-development-program-iswdp-fellowship&#34;&gt;&lt;strong&gt;India Semiconductor Workforce Development Program (ISWDP) Fellowship&lt;/strong&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Issued by:&lt;/strong&gt; IISc Bangalore, Synopsys, and Samsung · &lt;em&gt;May 2025&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Secured a prestigious fellowship under the Grade I category, awarded to top-performing candidates out of over 2,800 applicants.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Selection:&lt;/strong&gt; Based on academic excellence and demonstrated skills in semiconductor technologies.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Benefits:&lt;/strong&gt; Includes 100% waiver on training sessions, 75% waiver on lab sessions, and exclusive access to semiconductor-focused workshops and lab infrastructure.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;div class=&#34;extras-highlight&#34;&gt;&#xD;&#xA;&lt;h6 id=&#34;reliance-foundation-scholarship&#34;&gt;&lt;strong&gt;Reliance Foundation Scholarship&lt;/strong&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Issued by:&lt;/strong&gt; Reliance Foundation · &lt;em&gt;Feb 2024&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Description:&lt;/strong&gt; Recipient of a prestigious scholarship supporting meritorious first-year undergraduate students nationwide.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Selection:&lt;/strong&gt; Awarded on a merit-cum-means basis, with up to 5,000 scholars selected.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Benefits:&lt;/strong&gt; Besides financial aid, it also connects students to a strong alumni network.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;h6 id=&#34;crec-sjet-scholarship&#34;&gt;&lt;strong&gt;CREC-SJET Scholarship&lt;/strong&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Issued by:&lt;/strong&gt; CREC Silver Jubilee Endowment Trust · &lt;em&gt;Apr 2024&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Associated with:&lt;/strong&gt; National Institute of Technology Calicut&lt;/li&gt;&#xA;&lt;li&gt;Awarded in recognition of academic merit and financial need, enabling me to pursue my education and overcome financial barriers.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h6 id=&#34;fiitjee-tuition-fee-waiver&#34;&gt;&lt;strong&gt;FIITJEE Tuition Fee Waiver&lt;/strong&gt;&lt;/h6&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Issued by:&lt;/strong&gt; FIITJEE · &lt;em&gt;Mar 2021&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Associated with:&lt;/strong&gt; FIITJEE&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Selection:&lt;/strong&gt; Through performance in the FIITJEE Admission Test&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Award:&lt;/strong&gt; Received 100% tuition fee waiver for excelling in the admission test&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Search Result</title>
      <link>http://localhost:1313/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/search/</guid>
      <description></description>
    </item>
    <item>
      <title>Verilog HDL Toolkit for Image Processing and Pattern Recognition</title>
      <link>http://localhost:1313/projects/improve/subprojects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/improve/subprojects/</guid>
      <description>&lt;h5 style=&#34;color: #A45D5D; text-decoration: underline;&#34;&gt;&#xD;&#xA;  &lt;a href=&#34;http://localhost:1313/projects/improve/summary/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34; style=&#34;color: inherit; text-decoration: inherit;&#34;&gt;&#xD;&#xA;    QUICK LOOK AT REPOS&#xD;&#xA;  &lt;/a&gt;&#xD;&#xA;&lt;/h5&gt;&#xD;&#xA;&lt;h5 id=&#34;verilog-hdl-toolkit-for-image-processing-and-pattern-recognition&#34;&gt;Verilog HDL Toolkit for Image Processing and Pattern Recognition&lt;/h5&gt;&#xA;&lt;p&gt;&lt;strong&gt;Duration:&lt;/strong&gt; Individual, Ongoing&lt;br&gt;&#xA;&lt;strong&gt;Tools:&lt;/strong&gt; Verilog (Icarus Verilog) | C++ &amp;amp; Python (OpenCV, NumPy, Tkinter) | Scripting (TCL. Perl)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
