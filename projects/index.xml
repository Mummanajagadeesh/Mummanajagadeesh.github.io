<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on Jagadeesh Mummana | Portfolio</title><link>https://mummanajagadeesh.github.io/projects/</link><description>Recent content in Projects on Jagadeesh Mummana | Portfolio</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://mummanajagadeesh.github.io/projects/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://mummanajagadeesh.github.io/projects/gpbot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/gpbot/</guid><description>GPBOT - Basic Sensor based General Purpose AMR Do checkout : Basic Line Following Robot Obstacle Avoidance Robot Wall Follower Robot Differential Drive Robot Name GPBOT Description This 4-wheeled robot is equipped with GPS, IMU, LiDAR, Distance Sensors, and a 2-DOF camera (using linear and rotary actuators).</description></item><item><title/><link>https://mummanajagadeesh.github.io/projects/gpbot/diffdrive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/gpbot/diffdrive/</guid><description>Differential Drive Robot Simulation Name Differential Drive Robot Description A custom-built robot featuring a differential drive system that calculates its position and movement based on wheel rotations Start June 2024 Repository DDRðŸ”— Type Individual Level Beginner Skills Simulation, Programming Tools Used Webots, Python Current Status On Hold This repository contains the simulation of a Differential Drive Robot, built from scratch, which uses basic odometry to track its position.</description></item><item><title/><link>https://mummanajagadeesh.github.io/projects/gpbot/lfr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/gpbot/lfr/</guid><description>Line Follower Robot Name LFRBOT Description This project features a robot that follows a line using basic sensors.</description></item><item><title/><link>https://mummanajagadeesh.github.io/projects/gpbot/obstacle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/gpbot/obstacle/</guid><description>Obstacle Avoidance Robot Name Obstacle Avoidance Robot Description A robot equipped with basic sensors that detects obstacles and changes direction to avoid collisions without using advanced algorithms Start June 2024 Repository OARðŸ”— Type Individual Level Beginner Skills Simulation, Programming Tools Used Webots, Python Current Status On Hold This project simulates a line-following robot using the Webots robotics simulator.</description></item><item><title/><link>https://mummanajagadeesh.github.io/projects/gpbot/wallfollow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/gpbot/wallfollow/</guid><description>Wall Follower Robot Simulation Name Wall Follower Robot Description The wall-following robot travels along walls in a maze.</description></item><item><title/><link>https://mummanajagadeesh.github.io/projects/improve/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/improve/</guid><description>ImProVe: IMage PROcessing using VErilog Do checkout : NEural NEtwork in VERilog Name ImProVe Description ImProVe (Image Processing using Verilog) is a project focused on implementing image processing techniques using Verilog.</description></item><item><title/><link>https://mummanajagadeesh.github.io/projects/improve/fixed-point/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/improve/fixed-point/</guid><description>Fixed-Point Conversion Report for EMNIST Neural Network Introduction This report describes how I transitioned the EMNIST neural network implementation from floating-point arithmetic to fixed-point representation.</description></item><item><title/><link>https://mummanajagadeesh.github.io/projects/improve/never/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/improve/never/</guid><description>NeVer: NEural NEtwork in VERilog Do Checkout Main Project: ImProVe: IMage PROcessing using VErilog Name NeVer Description NeVer implements a neural network in Verilog for better hardware acceleration of image processing tasks Start 28 Feb 2025 Repository NeVerðŸ”— Type Individual Level Beginner Skills Image Processing, HDL, Computer Vision, Programming, ML Tools Used Verilog, Icarus, Perl, TCL, Quartus, C++, Python, NumPy Current Status Ongoing (Active) Progress - Implemented detection of MNIST digits (0-9) - Added support for EMNIST, enabling classification of 62 character classes - Integrated real-time inference with a Tkinter-based character drawing interface, achieving approx 1.</description></item><item><title/><link>https://mummanajagadeesh.github.io/projects/isro-anav/challenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/isro-anav/challenge/</guid><description>For complete official details and documentation, visit the ISRO IRoC-U2025.
IRoC-U 2025 â€“ Technical Challenge Summary Challenge Overview Design and demonstrate an Autonomous Navigation System for an Aerial Vehicle (ANAV) that can function in a simulated Martian environment without any external navigation aids like GNSS, pseudolites, or reflectors.</description></item><item><title/><link>https://mummanajagadeesh.github.io/projects/isro-anav/simulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/isro-anav/simulation/</guid><description>Simulation of Martian Arena in Webots for Autonomous Drone Testing Introduction To develop and evaluate autonomous drone navigation algorithms in a Mars-like environment, we replicated a Martian surface arena within the Webots simulation platform.</description></item><item><title/><link>https://mummanajagadeesh.github.io/projects/never/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/never/</guid><description>NeVer: NEural NEtwork in VERilog Do Checkout Main Project: ImProVe: IMage PROcessing using VErilog Name NeVer Description NeVer implements a neural network in Verilog for better hardware acceleration of image processing tasks Start 28 Feb 2025 Repository NeVerðŸ”— Type Individual Level Beginner Skills Image Processing, HDL, Computer Vision, Programming, ML Tools Used Verilog, Icarus, Perl, TCL, Quartus, Python, NumPy Current Status Ongoing (Active) Progress - Implemented detection of MNIST digits (0-9) - Added support for EMNIST, enabling classification of 62 character classes - Integrated real-time inference with a Tkinter-based character drawing interface, achieving approx 1.</description></item><item><title/><link>https://mummanajagadeesh.github.io/projects/pidc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/pidc/</guid><description>PIDC - PID Controller using OpAmps Name PIDC Description Implemented a PID controller using operational amplifiers to regulate system response and maintain desired performance.</description></item><item><title/><link>https://mummanajagadeesh.github.io/projects/prosarm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/prosarm/</guid><description>PR057H371C4RM Name PR057H371C4RM Description A simple prosthetic arm that utilizes servo motors to create tension in strings, replicating the function of human tendons to achieve realistic finger motion.</description></item><item><title/><link>https://mummanajagadeesh.github.io/projects/protocols/i2c_code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/protocols/i2c_code/</guid><description>MASTER `timescale 1ns / 1ps // Main module declaration module i2c_master( input wire clk, // System clock input wire rst, // Reset signal input wire [6:0] addr, // 7-bit I2C slave address input wire [7:0] data_in, // Data to send to slave in write mode input wire enable, // Start signal for I2C communication input wire rw, // Read/Write control (0 for write, 1 for read) output reg [7:0] data_out, // Data received from slave in read mode output wire ready, // Indicates when the master is ready for a new transaction inout i2c_sda, // I2C data line (SDA) - bidirectional inout wire i2c_scl // I2C clock line (SCL) - bidirectional ); // Define states for I2C master FSM localparam IDLE = 0; localparam START = 1; localparam ADDRESS = 2; localparam READ_ACK = 3; localparam WRITE_DATA = 4; localparam WRITE_ACK = 5; localparam READ_DATA = 6; localparam READ_ACK2 = 7; localparam STOP = 8; localparam DIVIDE_BY = 4; // Clock divider to generate I2C clock from system clock reg [7:0] state; // Current state of the FSM reg [7:0] saved_addr; // Stores the 7-bit address and RW bit for the current transaction reg [7:0] saved_data; // Data to be sent in write transactions reg [7:0] counter; // Bit counter for data/address transmission reg [7:0] counter2 = 0; // Divider counter for generating i2c_clk reg write_enable; // Controls whether the master drives SDA line reg sda_out; // Data to output on SDA line when write_enable is 1 reg i2c_scl_enable = 0; // Controls the state of the i2c_scl line (enabled or high) reg i2c_clk = 1; // Internal I2C clock signal // Ready signal is high when the master is idle and not in reset assign ready = ((rst == 0) &amp;amp;&amp;amp; (state == IDLE)) ?</description></item><item><title/><link>https://mummanajagadeesh.github.io/projects/protocols/i2cv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/protocols/i2cv/</guid><description>I2C Protocol Verilog Implementation using FSM Name I2C Protocol Description Verilog Implementation of I2C Protocol using Finite State Machine (FSM) design Start 06 Nov 2024 Repository I2CVðŸ”— Type Individual Level Beginner Skills HDL, Protocols, Programming Tools Used Verilog, Icarus, Xilinx Current Status On Hold This project implements the I2C protocol in Verilog with various versions and configurations.</description></item><item><title/><link>https://mummanajagadeesh.github.io/projects/rubec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/rubec/</guid><description>RU83C: Rubik&amp;rsquo;s Cube Solving Robot Name RU83C Description Rubik&amp;rsquo;s Cube-solving robot using Kociemba algorithm, featuring computer vision for state detection, mechanical design for cube manipulation, and electronics for execution.</description></item><item><title/><link>https://mummanajagadeesh.github.io/projects/shopping-cart-bot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/shopping-cart-bot/</guid><description>Shopping Cart Bot Name Shopping Cart Bot Description The Shopping Cart Bot is a robotics project designed to automate the shopping experience by utilizing computer vision and autonomous navigation.</description></item><item><title/><link>https://mummanajagadeesh.github.io/projects/tlcv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/tlcv/</guid><description>TRAFFIC LIGHT CONTROLLER ðŸš¦ Name TLC using Verilog Description Verilog Implementation of Traffic Light Controller Start 05 Apr 2024 Repository TLCVðŸ”— Type Individual Level Beginner Skills HDL, Programming Tools Used Verilog, Icarus, Xilinx Current Status On Hold The original version, which utilizes FSM, is currently on hold.</description></item><item><title>ANAV for Martian Surface Exploration</title><link>https://mummanajagadeesh.github.io/projects/isro-anav/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/isro-anav/</guid><description>ANAV for Martian Surface Exploration
Name ISRO-ANAV Description The designed ANAV is a sub-2â€¯kg rotorcraft built for GNSS-denied environments, capable of autonomous take-off, terrain scanning, safe landing, and return.</description></item><item><title>Basic Sensor-Based Mobile Robots</title><link>https://mummanajagadeesh.github.io/projects/gpbot/subprojects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/gpbot/subprojects/</guid><description/></item><item><title>Verilog HDL Toolkit for Image Processing and Pattern Recognition</title><link>https://mummanajagadeesh.github.io/projects/improve/subprojects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mummanajagadeesh.github.io/projects/improve/subprojects/</guid><description>Verilog HDL Toolkit for Image Processing and Pattern Recognition Duration: Individual, Ongoing
Tools: Verilog (Icarus Verilog, Xilinx Vivado) | C++ &amp;amp; Python (OpenCV, NumPy, Tkinter) | Scripting (TCL.</description></item></channel></rss>